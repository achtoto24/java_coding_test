#2563

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner stdln = new Scanner(System.in);
      
        int[][] paper = new int[100][100];
        int count = stdln.nextInt();

        for (int i = 0; i < count; i++) {
            int a = stdln.nextInt();    // width
            int b = stdln.nextInt();    // length
            for (int j = a; j < a + 10; j++) {
                for (int k = b; k < b +10; k++) {
                    paper[j][k] = 1;
                }
            }
        }

        int sum = 0;
        for (int i = 0; i < 100; i++) {
            for (int j = 0; j < 100; j++) {
                if (paper[i][j] == 1)
                    sum++;
            }
        }

        System.out.println(sum);
    }
}

#2869

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner stdln = new Scanner(System.in);
        int A = stdln.nextInt();
        int B = stdln.nextInt();
        int V = stdln.nextInt();

        int day = (V - B) / (A - B);    // A - B를 한 세트로 생각하기, V까지 올라가기만 하면 되므로 B를 제외시키기
        
        if  (((V - B) % (A - B)) != 0)  // 총 길이가 세트로 나누어 떨어지지 않을 경우 하루를 더 추가해서 올라가야 함
            day++;

        System.out.println(day);

    }
}

#1978

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner stdln = new Scanner(System.in);
        int N = stdln.nextInt();
        int cnt = 0;

        for (int i = 0; i < N; i++) {
            int num = stdln.nextInt();
            boolean flag = true;

            if (num == 1)
                continue;

            for (int j = 2; j <= Math.sqrt(num); j++) {  // 소수인지 검증하는 방법 : 2부터 입력한 숫자의 제곱근보다 
                if (num % j == 0) {                     // 작거나 같을 때까지 나머지 계산 
                    flag = false;
                    break;
                }
            }

            if (flag)
                cnt++;
        }

        System.out.println(cnt);
        stdln.close();
    }
}

# 11653

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
        
		int N = in.nextInt();
 
		for (int i = 2; i <= Math.sqrt(N); i++) {	// 또는 i * i <= N
			while (N % i == 0) {
				System.out.println(i);
				N /= i;
			}
		}

		if (N != 1)     // N % i == 0을 만족시키지 못 했을 경우 최종 N은 출력을 하지 못하는 것을 방지
			System.out.println(N);

    }
}

#24313

import java.util.Scanner;

public class Main{
public static void main(String[] args){
    
    Scanner sc = new Scanner(System.in);

    int a1 = sc.nextInt();
    int a0 = sc.nextInt();
    int c = sc.nextInt();
    int n0 = sc.nextInt();

    if((a1*n0+a0)<= c*n0 && a1 <= c){   // a1 <= c는 음수가 아닌 조건을 의미함
        System.out.println(1);
    }else{
        System.out.println(0);
    }
    sc.close();
    }
}

#1018

import java.util.Scanner;

public class Main {
    public static boolean[][] arr;
    public static int min = 64;

    public static void main(String[] args) {

        Scanner sc = new Scanner((System.in));

        int N = sc.nextInt();
        int M = sc.nextInt();

        arr = new boolean[N][M];

        for (int i = 0; i < N; i++) {
            String str = sc.next();

            for (int j = 0; j < M; j++) {
                if (str.charAt(j) == 'W')
                    arr[i][j] = true;   // 'W'일 때 true
                else
                    arr[i][j] = false;  // 'B'일 때 false
            }
        }

        // (i, j)는 8x8 체스판의 시작 지점
        for (int i = 0; i < N - 7; i++) {
            for (int j = 0; j < M - 7; j++) {
                find(i, j);
            }
        }

        System.out.println(min);

    }

    static void find(int x, int y) {
        boolean tf = arr[x][y]; // 기준 칸 값
        int count = 0;
        
        for (int i = x; i < x + 8; i++) {
            for (int j = y; j < y + 8; j++) {
                if (arr[i][j] != tf)
                    count++;
                    
                tf = !(tf);     // 다음 칸은 현재(기준) 칸 값과 반대
            }
            tf = !(tf); // 다음 줄 첫 번째 칸은 현재 줄 첫 번째 칸 값과 반대
        }

        int min_count = Math.min(count, 64 - count);    // 첫 번째 칸이 'W'이거나 'B' 두가지 경우 비교 

        min = Math.min(min, min_count);
    }

}

#2751

import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Main {
    public static void main(String[] args) {

        Scanner sc = new Scanner((System.in));
        StringBuilder sb = new StringBuilder();

        int N = sc.nextInt();

        ArrayList<Integer> list = new ArrayList<>();

        for (int i = 0; i < N; i++) 
            list.add(sc.nextInt());

        Collections.sort(list);

        for (int i : list)
            sb.append(i).append('\n');

        System.out.println(sb);
        
    }

}

# 11650

import java.util.Scanner;
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[][] arr = new int[N][2];

        for (int i = 0; i < N; i++) {
            arr[i][0] = sc.nextInt();
            arr[i][1] = sc.nextInt();
        }

        // 람다식 표현
        Arrays.sort(arr, (e1, e2) -> {
            if (e1[0] == e2[0])
                return e1[1] - e2[1];
            else
                return e1[0] - e2[0];
        });

        /*
        
         Arrays.sort(arr, new, Comparaotr<int[]>() {
            // Override
            public int compare(int[] e1, int[] e2) {
                if(e1[0] == e2[0])
                    return e1[1] - e2[1];
                else
                    return e1[0] - e2[0];        
            }
         })
         
         */

        for(int i = 0; i < N; i++)
            System.out.println(arr[i][0] + " " + arr[i][1]);
    }
}

#1181 : 런타임 에러

import java.util.Scanner;
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        String[] str = new String[N];
        
        for (int i = 0; i < N; i++) {
            str[i] = sc.next();
        }

        for (int i = 0; i < N - 1; i++) {
            for (int j = i + 1; j < N; j++) {
                if (str[i].length() > str[j].length()) {
                    String temp = str[i];
                    str[i] = str[j];
                    str[j] = temp;
                }
            }
        }

        int first = 0;
        while (first < N) {
            int last = first;
            int len = str[last].length();
            while (len == str[last].length()) {
                last++;
                if (last == 13)
                    break;
            }
            Arrays.sort(str, first, last);
            first = last; 
        }

        int i = 0;
        while (i < N - 1) {
            if (str[i].equals(str[i+1])) {
                System.out.println(str[i]);        
                i += 2;
            }
            else {
                System.out.println(str[i]);
                i += 1;
            }
        }
        
        System.out.println(str[N-1]);

    }
}

#1181

import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);

        int N = sc.nextInt();
        String[] arr = new String[N];

        sc.nextLine(); // 개행 버림

        for (int i = 0; i < N; i++)
            arr[i] = sc.nextLine();

        Arrays.sort(arr, new Comparator<String>() {
            public int compare(String s1, String s2) {

                if (s1.length() == s2.length()) 
                    return s1.compareTo(s2);    // 단어 사전순 정렬; 반환값 int형  
                else
                    return s1.length() - s2.length();   // 단어 길이순 정렬 
            }
        });

        System.out.println(arr[0]);

        for (int i = 1; i < N; i++) {
            if (!arr[i].equals(arr[i - 1]))
                System.out.println(arr[i]);
        }

    }
}

#18870

import java.util.Scanner;
import java.util.Arrays;
import java.util.HashMap;

// HashMap을 이용하여 요소와 rank값 매칭하기
// Arrays.sort() 이용하여 요소 정렬 후 차례대로 rank 매기기

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);

        int N = sc.nextInt();

        int[] arr = new int[N];
        int[] arr_sort = new int[N];
        HashMap<Integer, Integer> rankMap = new HashMap<Integer, Integer>();

        for (int i = 0; i < N; i++) 
            arr[i] = arr_sort[i] = sc.nextInt();        

        Arrays.sort(arr_sort);

        int rank = 0;

        for (int i : arr_sort) {
            if (!rankMap.containsKey(i)) {
                rankMap.put(i, rank);
                rank++;
            }
        }
        
        StringBuilder sb = new StringBuilder();
        for (int i : arr) 
            sb.append(rankMap.get(i)).append(' ');
        
        System.out.println(sb);

    }
}
