#9093

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.StringTokenizer;
import java.util.Stack;

/*
 * 스택의 기본 설명
 */
public class Main {

    public static void main(String[] args) throws IOException{

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine());

        while (T > 0) {
            Stack<Character> stack = new Stack<>();
            String str = br.readLine();
            StringBuilder sb = new StringBuilder();

            for (int i = 0; i < str.length(); i++) {
                if (str.charAt(i) == ' ') {
                    while (!stack.empty()) 
                        sb.append(stack.pop());
                    sb.append(" ");
                }
                else {
                    stack.push(str.charAt(i));
                }
            }
            
            while(!stack.empty())
                sb.append(stack.pop());
                
            System.out.println(sb);

            T--;
        }

    }

}

#1406

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;

// 스택을 이용한 풀이
/*
 * 왼쪽 스택과 오른쪽 스택을 준비하고 두 스택 가운데를 커서라고 가정함
 * 만약 커서가 왼쪽으로 움직이면 왼쪽 스택 top 요소는 오른쪽 스택으로 옮겨짐
 * 이런식으로 에디터 조건을 구현
 * 결론적으로 오른쪽 스택에 전부 요소를 넣어 pop을 하면 원하는 문자열이 출력됨! 
 * 솔직히 처음 아이디어를 떠올리기 어려웠음...
 */
public class Main {
    
    static Stack<Character> leftStr;
    static Stack<Character> rightStr;
    public static void main(String[] args) throws IOException {
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String str = br.readLine();

        leftStr = new Stack<>();
        rightStr = new Stack<>();
        for (int i = 0; i < str.length(); i++)
            leftStr.push(str.charAt(i));

        int N = Integer.parseInt(br.readLine());

        while (N > 0) {
            String op = br.readLine();

            switch (op.charAt(0)) {
                case 'L':
                    if (!leftStr.isEmpty())
                        rightStr.push(leftStr.pop());

                    break;
            
                case 'D':
                    if (!rightStr.isEmpty())
                        leftStr.push(rightStr.pop());

                    break;

                case 'B':
                    if (!leftStr.isEmpty())
                        leftStr.pop();

                    break;

                case 'P':
                    char c = op.charAt(2);
                    leftStr.push(c);
                    break;
            }
            N--;
        }

        while (!leftStr.isEmpty()) 
            rightStr.push(leftStr.pop());
        
        StringBuilder sb = new StringBuilder();
        while (!rightStr.isEmpty()) 
            sb.append(rightStr.pop());
        

        System.out.println(sb);

    }
}

#9012

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;

/*
 * '('는 스택에 push하고 ')'는 스택에서 pop을 하면 됨
 * 결과적으로 스택에 '(' 이나 ')'이 남아있으면 VPS를 만족하지 못 함 
 */
public class Main {
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		
		for(int i = 0; i < T; i++) {
			String S = br.readLine();
			
			Stack<Character> stack = new Stack<Character>();
			
			for (int j = 0; j < S.length(); j++) {
				if (S.charAt(j) == '(') 
					stack.push(S.charAt(j));
				else {
					//비어있는지를 먼저 본다.
					if (stack.isEmpty()) {
						stack.push(S.charAt(j));
						break;
					}else 
						stack.pop();
				}
			}
			if (stack.isEmpty()) System.out.println("YES");
			else System.out.println("NO");
		}
	}

}

#1874

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Stack;
 
public class Main {
	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();	// 출력할 결과물 저장
		
		Stack<Integer> stack = new Stack<>();
		
		int N = Integer.parseInt(br.readLine());
		
		int start = 0;
		
		// N 번 반복
		while(N -- > 0) {
			
			int value = Integer.parseInt(br.readLine());
			
			if(value > start) {
				// start + 1부터 입력받은 value 까지 push를 한다.
				for(int i = start + 1; i <= value; i++) {
					stack.push(i);
					sb.append('+').append('\n');	// + 를 저장한다. 
				}
				start = value; 	// 다음 push 할 때의 오름차순을 유지하기 위한 변수 초기화 
			}
			
			// top에 있는 원소가 입력받은 값과 같이 않은 경우  
			else if(stack.peek() != value) {
				System.out.println("NO");
				return;		// 또는 System.exit(0); 으로 대체해도 됨. 
			}
			
			stack.pop();
			sb.append('-').append('\n');
			
		}
		
		System.out.println(sb);
	}
}