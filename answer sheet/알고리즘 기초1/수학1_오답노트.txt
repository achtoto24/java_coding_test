#2609

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

// GCD 알고리즘 - 재귀적 알고리즘 풀이
public class Main {

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int a = Integer.parseInt(st.nextToken());
        int b = Integer.parseInt(st.nextToken());

        int d = gcd(a, b);

        System.out.println(d);
        System.out.println(a * b / d);
               
    }

    public static int gcd(int a, int b) {

        if (b == 0)
            return a;

        return gcd(b, a % b);
        
    }
}

#1929

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

// 에라토스테네스의 체 : 2부터 소수의 제곱과 그 이후의 배수들을 제외해 나가는 방식
public class Main {

    public static boolean[] prime;
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int M = Integer.parseInt(st.nextToken());
        int N = Integer.parseInt(st.nextToken());

        prime = new boolean[N + 1];
        get_prime();

        StringBuilder sb = new StringBuilder();
        for (int i = M; i <= N; i++)
            if (!prime[i]) sb.append(i).append('\n');

        System.out.println(sb);

    }

    public static void get_prime() {
        
        prime[0] = prime[1] = true;

        for (int i = 2; i <= Math.sqrt(prime.length); i++) {
            if (prime[i]) continue;
            for (int j = i * i; j < prime.length; j += i)
                prime[j] = true;
        }

    }
}