#1920

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
    
    static int[] arr;

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int N = Integer.parseInt(br.readLine());
        arr = new int[N];

        StringTokenizer st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }


        Arrays.sort(arr);

        int M = Integer.parseInt(br.readLine());

        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < M; i++) {
            if (binarySearch(Integer.parseInt(st.nextToken())) != -1) System.out.println(1);
            else System.out.println(0);
        }
        
    }

    public static int binarySearch(int key) {
        int li = 0;
        int ri = arr.length - 1;

        while (li <= ri) {
            int mid = (li + ri) / 2;

            if (key < arr[mid]) ri = mid - 1;
            else if (key > arr[mid]) li = mid + 1;
            else return mid;
        }

        return -1;

    }
    

}

#10816

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException{

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();
        StringTokenizer st;

        int N = Integer.parseInt(br.readLine());
        int[] arr =new int[N];
        
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }

        Arrays.sort(arr);
        
        int M = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < M; i++) {
            int key = Integer.parseInt(st.nextToken());
            sb.append(upperBound(arr, key) - lowerBound(arr, key)).append(' ');
        }
        
        System.out.println(sb);
        
    }

    static int lowerBound(int[] arr, int key) {

        int li = 0;
        int ri = arr.length;

        while (li < ri) {
            int mid = (li + ri) / 2;

            if (key <= arr[mid]) ri = mid; 
            else li = mid + 1;
        }

        return li;

    }

    static int upperBound(int[] arr, int key) {

        int li = 0;
        int ri = arr.length;

        while (li < ri) {
            int mid = (li + ri) / 2;

            if (key < arr[mid]) ri = mid; 
            else li = mid + 1;
        }

        return li;

    }
    
    
}

#2805

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException{
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());

        int[] arr = new int[N];

        int min = 0;
        int max = 0;

        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            arr[i] = Integer.parseInt(st.nextToken());

            if (max < arr[i]) max = arr[i];
        }

        while (min < max) {
            int mid = (min + max) / 2;
            long sum = 0;
            for (int arr_len : arr) {
                if (arr_len - mid > 0) sum += (arr_len - mid);
            }

            if (sum < M) max = mid;
            else min = mid + 1;
        }

        System.out.println(min - 1);
        
    }
}

#1654

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException{
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        int K = Integer.parseInt(st.nextToken());
        int N = Integer.parseInt(st.nextToken());

        int[] arr = new int[K];

        for (int i = 0; i < K; i++) {
            arr[i] = Integer.parseInt(br.readLine());
        }

        long max = arr[0];
        long min = 0;
        for (int i = 1; i < K; i++) {
            max = max < arr[i] ? arr[i] : max;
        }

        max++;
        
        while (min < max) {
            long mid = (min + max) / 2;

            long num = 0;
            for (int i : arr) {
                num += i / mid;
            }

            // Upper Bound 형식 : 같은 num값과 연계된 mid들 중 최대값을 구하므로
            // 나열된 mid들 중 가장 오른쪽 값을 구하기 위해 num값이 달라지는 시점의
            // mid를 구하는 mid+1(num값이 달라졌을 때 가장 작은 mid)을 하면 됨
            if (num < N) max = mid; 
            else min = mid + 1;                       
        }
        
        System.out.println(min - 1);
        
    }
}

#2512

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException{
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int N = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] arr = new int[N + 1];
        
        for (int i = 0; i < N; i++) {
            arr[i] = Integer.parseInt(st.nextToken(" "));
        }

        int M = Integer.parseInt(br.readLine());

        int min = 0;
        int max = arr[0];
        for (int i = 1; i < N; i++) {
            max = (arr[i] > max) ? arr[i] : max;
        }

        while (min <= max) {
            int mid = (min + max) / 2;
            
            int sum = 0;
            for (int i = 0; i < N; i++) {
                if (arr[i] >= mid) sum += mid;
                else sum += arr[i];
            }
            
            if (sum > M) max = mid - 1;
            else min = mid + 1;
        }

        System.out.println(max);
    }
}

// 해냈다!!!!!!!!!!!!!!!!!!!!!!!

#2343

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException{
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int[] arr = new int[N];
        
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }

        long min = 0;
        long max = 0;
        for (int i = 0; i < N; i++) {
            min = Math.max(min, arr[i]);    // min이 될 수 있는 가장 작은 값은 배열 원소 중 가장 큰 값 
            max += arr[i];
        }
        
        while (min <= max) {
            long mid = (min + max) / 2;

            long sum = 0;
            long num = 1;
            for (int i = 0; i < N; i++) {
                sum += arr[i];
                if (sum <= mid) continue;      
                else {
                    sum = 0;
                    sum += arr[i];
                    num++;
                }
            }

            if (num <= M) max = mid - 1;
            else min = mid + 1;
        }

        System.out.println(min);
        
    }
}

#1072

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException{
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        long X = Long.parseLong(st.nextToken());
        long Y = Long.parseLong(st.nextToken());
       
        long Z = Y * 100 / X ;

        if (Z >= 99) {
            System.out.println(-1);
            return;
        }
        int min = 0;
        int max = 1000000000;
        int result = 0;

        while (min <= max) {
            int mid = (min + max) / 2;

            long temp = (Y + mid) * 100 / (X + mid);

            if (Z >= temp) {
                min = mid + 1;
                result = mid + 1;
            }
            else max = mid - 1;

        }

        System.out.println(result);
        
    }
}

#2776

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine());
        StringBuilder sb = new StringBuilder();
        StringTokenizer st;

        for (int i = 0; i < T; i++) {
            int N = Integer.parseInt(br.readLine());
            int[] arr = new int[N];
            st = new StringTokenizer(br.readLine());

            for (int j = 0; j < N; j++) {
                arr[j] = Integer.parseInt(st.nextToken());
            }
            
            Arrays.sort(arr);

            int M = Integer.parseInt(br.readLine());
            st = new StringTokenizer(br.readLine());

            for (int j = 0; j < M; j++) {
                int val = Integer.parseInt(st.nextToken());

                int left = 0;
                int right = N-1;
                boolean flag = false;
                
                while (left <= right) {
                    int mid = (left + right) / 2;

                    if (val == arr[mid]) {
                        flag = true;
                        break;
                    } else if (val > arr[mid]) left = mid + 1;
                    else right = mid - 1;
                }
                
                if (flag) sb.append(1).append("\n");
                else sb.append(0).append("\n");
                
            }
        }
        System.out.print(sb);
        
    }
    
}

#7795

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
    
    public static void main(String[] args) throws IOException {
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine());
        StringTokenizer st;

        for (int i = 0; i < T; i++) {
            st = new StringTokenizer(br.readLine());
            int N = Integer.parseInt(st.nextToken());
            int M = Integer.parseInt(st.nextToken());

            int[] A = new int[N];
            int[] B = new int[M];

            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < N; j++) {
                A[j] = Integer.parseInt(st.nextToken());
            }

            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < M; j++) {
                B[j] = Integer.parseInt(st.nextToken());
            }

            Arrays.sort(B);
            int result = 0;

            for (int a : A) {
                int left = 0;
                int right = M - 1;

                // lower_bound: B에서 a보다 작은 수의 개수
                while (left <= right) {
                    int mid = (left + right) / 2;
                    if (B[mid] < a) {
                        left = mid + 1;
                    } else {
                        right = mid - 1;
                    }
                }

                result += left;
            }

            System.out.println(result);
        }
    }
}

#16401

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int M = Integer.parseInt(st.nextToken());
		int N = Integer.parseInt(st.nextToken());
		int[] arr = new int[N];
		
		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < N; i++) {
			arr[i] = Integer.parseInt(st.nextToken());
		}

		Arrays.sort(arr);

		int left = 1;
		int right = arr[N - 1];
		int result = 0;

		while (left <= right) {
			int mid = (left + right) / 2;
			int cnt = 0;
			
			for (int i = 0; i < N; i++) {
				if (mid <= arr[i]) {
					cnt += arr[i] / mid;
				}
			}
			
						
			if (M <= cnt) {
				if (result < mid) result = mid;	// 최댓값 갱신
				left = mid + 1;
			}   
			else right = mid - 1;
		}

		System.out.println(result);
				
	}
}

#2417

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		long N = Long.parseLong(br.readLine());

		long left = 0;
		long right = N;
		long result = 0;

		while (left <= right) {
			long mid = (left + right) / 2;

			if (Math.pow(mid, 2) >= N) {
				result = mid;
				right = mid - 1; 
			} else left = mid + 1;
		}

		System.out.println(result);
		
	}
}

#17266

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		int N = Integer.parseInt(br.readLine());
		int M = Integer.parseInt(br.readLine());
		
		int[] arr = new int[M];
		
		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < M; i++) {
			arr[i] = Integer.parseInt(st.nextToken());
		}
		
		int bottom = 1;
		int top = N;
		int result = 0;

		while (bottom <= top) {
			int mid = (bottom + top) / 2;
			boolean flag = true;

			int point = 0;
			for (int i = 0; i < M; i++) {
				if (arr[i] - mid <= point) point = arr[i] + mid;
				else flag = false;
			}

			if (N - point > 0) flag = false;
			else flag = true;

			if (flag) {					// 모두 비출 수 있음
				result = mid;
				top = mid - 1;
			} else bottom = mid + 1;	// 모두 비출 수 없음
		}
		
		System.out.println(result);

	}
	
}

#19637

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashMap;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		String[] str = new String[N];
		int[] arr = new int[N];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			str[i] = st.nextToken();	
			arr[i] = Integer.parseInt(st.nextToken());
		}

		for (int i = 0; i < M; i++) {
			int num = Integer.parseInt(br.readLine());

			int left = 0;
			int right = N - 1;
			int result = 0;

			while (left <= right) {
				int mid = (left + right) / 2;

				if (arr[mid] < num) left = mid + 1;
				else {
					result = mid;
					right = mid - 1;
				}
			}

			System.out.println(str[result]);
		}
		
	}
	
}

#2792

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		int[] arr = new int[M];

		for (int i = 0; i < M; i++) {
			arr[i] = Integer.parseInt(br.readLine());
		}

		Arrays.sort(arr);

		int left = 1;
		int right = arr[M - 1];
		int result = Integer.MAX_VALUE;
		while (left <= right) {
			int mid = (left + right) / 2;
			int cnt = 0;

			for (int i = 0; i < M; i++) {
				if (mid <= arr[i] && arr[i] % mid != 0) cnt += arr[i] / mid + 1; 
				else if (mid <= arr[i] && arr[i]% mid == 0) cnt += arr[i] / mid;
				else cnt++;
			}

			if (cnt > N) {
				left = mid + 1;
			}	
			else {
				result = mid;
				right = mid - 1;
			}
		}
		
		System.out.println(result);

	}
	
}