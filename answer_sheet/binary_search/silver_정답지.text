#1920

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
    
    static int[] arr;

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int N = Integer.parseInt(br.readLine());
        arr = new int[N];

        StringTokenizer st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }


        Arrays.sort(arr);

        int M = Integer.parseInt(br.readLine());

        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < M; i++) {
            if (binarySearch(Integer.parseInt(st.nextToken())) != -1) System.out.println(1);
            else System.out.println(0);
        }
        
    }

    public static int binarySearch(int key) {
        int li = 0;
        int ri = arr.length - 1;

        while (li <= ri) {
            int mid = (li + ri) / 2;

            if (key < arr[mid]) ri = mid - 1;
            else if (key > arr[mid]) li = mid + 1;
            else return mid;
        }

        return -1;

    }
    

}

#10816

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException{

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();
        StringTokenizer st;

        int N = Integer.parseInt(br.readLine());
        int[] arr =new int[N];
        
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }

        Arrays.sort(arr);
        
        int M = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < M; i++) {
            int key = Integer.parseInt(st.nextToken());
            sb.append(upperBound(arr, key) - lowerBound(arr, key)).append(' ');
        }
        
        System.out.println(sb);
        
    }

    static int lowerBound(int[] arr, int key) {

        int li = 0;
        int ri = arr.length;

        while (li < ri) {
            int mid = (li + ri) / 2;

            if (key <= arr[mid]) ri = mid; 
            else li = mid + 1;
        }

        return li;

    }

    static int upperBound(int[] arr, int key) {

        int li = 0;
        int ri = arr.length;

        while (li < ri) {
            int mid = (li + ri) / 2;

            if (key < arr[mid]) ri = mid; 
            else li = mid + 1;
        }

        return li;

    }
    
    
}