#1934

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

// GCD 알고리즘
public class Main {

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine());

        for (int i = 0; i < T; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            int result = gcd(a, b);
            System.out.println(a * b / result);
        }
            
    }

    static int gcd(int a, int b) {
        if (b == 0)
            return a;
        return gcd (b, a % b);
    }

}

#10872

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Main {
        
    public static void main(String[] args) throws IOException {

            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            int N = Integer.parseInt(br.readLine());

            System.out.println(factorial(N));
        
    }

    public static int factorial(int num) {
        if (num <= 1) return 1;
        return num * factorial(num - 1);
    }

}

#2004

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {
        
    public static void main(String[] args) throws IOException {

            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            StringTokenizer st = new StringTokenizer(br.readLine());
            int n = Integer.parseInt(st.nextToken());
            int m = Integer.parseInt(st.nextToken());

            int cnt5 = cnt_5(n) - (cnt_5(n - m) + cnt_5(m)); 
            int cnt2 = cnt_2(n) - (cnt_2(n - m) + cnt_2(m));             
            
            System.out.println(Math.min(cnt5, cnt2));

    }


    public static int cnt_5(int num) {

        int count = 0;
        
        while (num >= 5) {
            count += num / 5;
            num /= 5;
        }

        return count;

    }

    public static int cnt_2(int num) {

        int count = 0;
        
        while (num >= 2) {
            count += num / 2;
            num /= 2;
        }

        return count;

    }

}

#17087

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {
        
    public static void main(String[] args) throws IOException {

            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            StringTokenizer st = new StringTokenizer(br.readLine());
            int N = Integer.parseInt(st.nextToken());
            int S = Integer.parseInt(st.nextToken());

            int[][] arr = new int[2][N];
            StringTokenizer st2 = new StringTokenizer(br.readLine());
            for (int i = 0; i < N; i++) {
                arr[0][i] = Integer.parseInt(st2.nextToken());
                arr[1][i] = Math.abs(S - arr[0][i]);
            }

            if (N == 1) {
                System.out.println(arr[1][0]);
                return;
            }
            
            int res = gcd(arr[1][0], arr[1][1]);
            for (int i = 2; i < N; i++) {
                res = gcd(res, arr[1][i]);
            }
            
            System.out.println(res);
                     
    }

    public static int gcd(int a, int b) {

        if (b == 0) return a;
        return gcd(b, a % b);

    }

}

#1212

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main{
    public static void main(String[] args) throws IOException {
        StringBuilder sb = new StringBuilder();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String octat_num = br.readLine();

        for(int i=0; i<octat_num.length(); i++){
            int target = octat_num.charAt(i) - '0';
            String s = Integer.toBinaryString(target);
            if(s.length() == 3){
                sb.append(s);
            }
            else if(s.length()==2 && i!=0){
                sb.append("0" + s);
            }
            else if(s.length()==1 && i!=0){
                sb.append("00" + s);
            }
            else
                sb.append(s);
        }

        System.out.println(sb.toString());

    }
}

