#11047

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());
		int[] arr = new int[N];

		for (int i = 0; i < N; i++) {
			arr[i] = Integer.parseInt(br.readLine());
		}		

		int cnt = 0;
		for (int i = N -1; i >= 0; i--) {
			if (arr[i] <= K) {
				cnt += K / arr[i];
				K %= arr[i];
			}
		}

		System.out.println(cnt);
		
	}
}

#1789

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine(), "-");
		int sum = 0;
		boolean flag = true;

		while (st.hasMoreTokens()) {
			StringTokenizer st2 = new StringTokenizer(st.nextToken(), "+");
			int temp = 0;
			
			while (st2.hasMoreTokens()) {
				temp += Integer.parseInt(st2.nextToken());
			}

			if (flag) {
				sum += temp;
				flag = false;
			}
			else sum -= temp;
		}

		System.out.println(sum);
		
	}
}

#1789

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		long S = Long.parseLong(br.readLine());
		long total = 0;
		int cnt = 0;
		int num = 1;

		while (total <= S) {
			total += num;
			cnt++;
			num++;
		}

		System.out.println(cnt-1);
		
	}

}

#1439

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		int N = Integer.parseInt(br.readLine());
		long[] road = new long[N-1];
		long[] price = new long[N];
		
		st = new StringTokenizer(br.readLine());
		for (int i = 0; i <N-1; i++) {
			road[i] = Long.parseLong(st.nextToken());
		}

		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < N; i++) {
			price[i] = Long.parseLong(st.nextToken());
		}

		long total = 0;
		long min = price[0];
		total += price[0] * road[0];
		for (int i = 1; i < N-1; i++) {
			if (min > price[i]) {
				total += price[i] * road[i];
				min = price[i];
			} else total += min * road[i];
		}

		System.out.println(total);

		
	}
}

#1439

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st, st2;
		
		String S = br.readLine();
		int num_0 = 0, num_1 = 0;
		String temp;

		st = new StringTokenizer(S,"0");
		 while (st.hasMoreTokens()) {
			temp = st.nextToken();
			num_0++;
		 }

		 
		st2 = new StringTokenizer(S,"1");
		while (st2.hasMoreTokens()) {
			temp = st2.nextToken();
		   	num_1++;
		}

		if (num_0 >= num_1) System.out.println(num_1);
		else System.out.println(num_0);;
		
	}
}

#1946

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

// 서류 성적 순위로 정렬한 후 면접 성적 비교하기
// 비교군 중에서 한 명이라도 서류, 면접 성적 순위가 모두 높다면 탈락! 
public class Main {

	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		int T = Integer.parseInt(br.readLine());

		for (int i = 0; i < T; i++) {
			int N = Integer.parseInt(br.readLine());
			int[] arr = new int[N + 1];
			int cnt = 1;

			for (int j = 0; j < N; j++) {
				st = new StringTokenizer(br.readLine());
				int a = Integer.parseInt(st.nextToken());
				int b = Integer.parseInt(st.nextToken());
				arr[a] = b;
			}

			int compare = arr[1];
			for (int j = 2; j < N+1; j++) {
				if (compare > arr[j]) {
						cnt++;
						compare = arr[j];
				}
			}
			
			System.out.println(cnt);
			
		}
		
		
	}
}

#10610

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

public class Main {
	static StringBuilder sb = new StringBuilder();

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		String str = br.readLine();
		int[] arr = new int[str.length()];
		for (int i = 0; i < str.length(); i++) {
			arr[i] = str.charAt(i) - '0';
		}

		Arrays.sort(arr);

		int sum = 0;
		for (int i : arr) {
			sum += i;
		}

		if (sum % 3 == 0 && arr[0] == 0) {
			for (int i = arr.length - 1; i >= 0; i--) {
				sb.append(arr[i]);
			}
			System.out.println(sb);
		} else System.out.println(-1);
					
	}
	
}

#1049

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());

		int[] arr1 = new int[M];
		int[] arr2 = new int[M];


		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			arr1[i] = Integer.parseInt(st.nextToken());
			arr2[i] = Integer.parseInt(st.nextToken());
		}

		Arrays.sort(arr1);
		Arrays.sort(arr2);

		int num1 = N / 6;
		int num2 = N % 6;

		int cost1 = (num1 + 1) * arr1[0];
		int cost2 = num1 * arr1[0] + num2 * arr2[0];
		int cost3 = N * arr2[0];
		
		System.out.println(Math.min(cost1, Math.min(cost2, cost3)));
		
	}
}

#14916

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int n = Integer.parseInt(br.readLine());

		if (n == 1 || n == 3) {
			System.out.println(-1);
			return;
		}
		
		int cnt = 0;
		int temp = n;

		while (temp % 5 != 0) {
			temp -= 2;
			cnt++; 
		}

		cnt += temp / 5;

		
		System.out.println(cnt);
		
	}
}

#1449

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
			
		st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int L = Integer.parseInt(st.nextToken());
		int[] arr = new int[N];

		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < N; i++) {
			arr[i] = Integer.parseInt(st.nextToken());
		}

		Arrays.sort(arr);

		double length = arr[0] - 0.5 + L; 
		int cnt = 1;

		for (int i = 1; i < N; i++) {
			if (length < arr[i] + 0.5) {
				length = arr[i] - 0.5 + L;
				cnt++;
			}
		}

		System.out.println(cnt);
		
	}
}

#11501

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		int T = Integer.parseInt(br.readLine());

		while (T-- > 0) {

			int N = Integer.parseInt(br.readLine());
			int[] arr = new int[N];

			st = new StringTokenizer(br.readLine());
			for (int i = 0; i < N; i++) {
				arr[i] = Integer.parseInt(st.nextToken());
			}

			long profit = 0;
			int max = 0;
			for (int i = N - 1; i >= 0; i--) {
				if (arr[i] > max) {
					max = arr[i];
				} else {
					profit += max - arr[i];
				}
			}

			System.out.println(profit);

		}
			
	}

}

#1080

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());

		int[][] A = new int[N][M];
		int[][] B = new int[N][M];

		for (int i = 0; i < N; i++) {
			String str = br.readLine();
			for (int j = 0; j < M; j++) {
				A[i][j] = str.charAt(j) - '0';
			}
		}
		
		for (int i = 0; i < N; i++) {
			String str = br.readLine();
			for (int j = 0; j < M; j++) {
				B[i][j] = str.charAt(j) - '0';
			}
		}

		int cnt = 0;

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (A[i][j] != B[i][j] && i + 2 < N && j + 2 < M) {
					for (int r = i; r < i + 3; r++) {
						for (int c = j; c < j + 3; c++) {
							A[r][c] = A[r][c] == 0 ? 1 : 0;
						}
					}
					cnt++;
				}
			}
		}
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (A[i][j] != B[i][j]) {
					System.out.println(-1);
					return;
				}
			}
		}

		System.out.println(cnt);
		
	}

 }

#15903

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int N = Integer.parseInt(br.readLine());
		int[] arr = new int[N];

		for (int i = 0; i < N; i++) {
			arr[i] = Integer.parseInt(br.readLine());
		}

		int num = arr[N - 1];
		int cnt = 0;
		for (int i = N-2; i >= 0; i--) {
			while (arr[i] >= num) {
				arr[i]--;
				cnt++;
			}
			num = arr[i];
		}
		
		System.out.println(cnt);
		
	}
}

#15903

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		long[] arr = new long[n];

		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < n; i++) {
			arr[i] = Integer.parseInt(st.nextToken());
		}

		Arrays.sort(arr);

		while (m-- != 0) {
			long temp = arr[0] + arr[1];
			arr[0] = temp;
			arr[1] = temp;
			Arrays.sort(arr);
		}
		
		long sum = 0;
		for (long i : arr) {
			sum += i;
		}

		System.out.println(sum);
		
	}
}

#1213

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

// 팰린드롬 특징 파악하기
// 문자열 길이를 앞, 중간, 뒤로 나누어서 생각하기
// 문자의 개수가 홀수개인 것이 하나일 경우 팰린드롬 성립
public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int[] arr = new int[26];
		
		String str = br.readLine();
		for (int i = 0; i < str.length(); i++) {
			int idx = str.charAt(i) - 'A';
			arr[idx]++;
		}

		int isOdd = 0;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] % 2 != 0) isOdd++;
		}
		
		String result = "";
		if (isOdd > 1) {
			result += "I'm Sorry Hansoo";
		} else {
			StringBuilder sb = new StringBuilder();

			// start
			for (int i = 0; i < arr.length; i++) {
				for (int j = 0; j < arr[i]/2; j++) {
					sb.append((char)(i + 65));
				}
			}
			result += sb.toString();

			// end 
			String temp = sb.reverse().toString();

			// middle
			sb = new StringBuilder();
			for (int i = 0; i < arr.length; i++) {
				if (arr[i] % 2 != 0) sb.append((char)(i + 65));
			}

			result += sb.toString() + temp;
			
		}
		
		System.out.println(result);

		
	}
}

#1343

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	static String A4 = "AAAA";
	static String B2 = "BB";

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String str = br.readLine();

		StringBuilder sb = new StringBuilder();
		int count = 0;

		for (int i = 0; i < str.length(); i++) {
			char c = str.charAt(i);

			if (c == 'X') {
				count++;
			} else {
				// 'X' 덩어리 처리
				if (count % 2 != 0) {
					System.out.println(-1);
					return;
				}
				while (count >= 4) {
					sb.append(A4);
					count -= 4;
				}
				while (count >= 2) {
					sb.append(B2);
					count -= 2;
				}
				sb.append('.'); // '.' 그대로 추가
			}
		}

		// 마지막에 X로 끝났을 때 처리
		if (count % 2 != 0) {
			System.out.println(-1);
			return;
		}
		while (count >= 4) {
			sb.append(A4);
			count -= 4;
		}
		while (count >= 2) {
			sb.append(B2);
			count -= 2;
		}

		System.out.println(sb);
	}
}
