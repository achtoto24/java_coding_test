#2606

package java_coding_test.src;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

    static int[][] arr;
    static boolean[] check;
    
    static int node, line;
    static int cnt = 0;

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        node = Integer.parseInt(br.readLine());
        line = Integer.parseInt(br.readLine());

        arr = new int[node + 1][node + 1];
        for (int i = 0; i < line; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            arr[a][b] = arr[b][a] = 1;
        }

        check = new boolean[node + 1];

        int start = 1;
        dfsR(start);

        System.out.println(cnt - 1);

    }

    public static void dfsR(int start) {

        check[start] = true;
        cnt++;

        for (int i = 1; i <= node; i++) {
            if (arr[start][i] == 1 && !check[i]) dfsR(i);
        }

    }

}

#2667

package java_coding_test.src;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;

public class Main {

    static int[][] map;
    static boolean[][] check;
    static int[] move_x = {1, -1, 0, 0};
    static int[] move_y = {0, 0, 1, -1};
    
    static int N;
    static int cnt;

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        N = Integer.parseInt(br.readLine());

        map = new int[N + 1][N + 1];
        for (int i = 0; i < N; i++) {
            String str = br.readLine();
            for (int j = 0; j < N; j++) 
                map[i][j] = str.charAt(j) - '0';
        }

        check = new boolean[N + 1][N + 1];
        ArrayList<Integer> list = new ArrayList<>();
        int result = 0;

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (map[i][j] == 1 && !check[i][j]) {
                    cnt = 0;
                    dfsR(i, j);
                    list.add(cnt);
                    result++;
                }
            }
        }

        Collections.sort(list);
        
        System.out.println(result);
        for (int i = 0; i < list.size(); i++)
            System.out.println(list.get(i));

    }

    public static void dfsR(int x, int y) {

        check[x][y] = true;
        cnt++;

        for (int i = 0; i < 4; i++) {
            int next_x = move_x[i] + x;
            int next_y = move_y[i] + y;

            if (next_x < 0 || next_y < 0 || next_x > N || next_y > N) continue;
            if (map[next_x][next_y] == 0 || check[next_x][next_y]) continue;

            dfsR(next_x, next_y);

        }
        


    }
    
}

#1012

package java_coding_test.src;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

    static int[][] arr;
    static boolean[][] check;
    static int[] move_x = {-1, 1, 0, 0};
    static int[] move_y = {0, 0, -1, 1};

    static int M, N, node;
    
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int T = Integer.parseInt(br.readLine());

        for (int i = 0; i < T; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            M = Integer.parseInt(st.nextToken());
            N = Integer.parseInt(st.nextToken());
            node = Integer.parseInt(st.nextToken()); 

            arr = new int[M + 1][N + 1];
            check = new boolean[M + 1][N + 1];
            int cnt = 0;

            for (int j = 0; j < node; j++) {
                StringTokenizer st2 = new StringTokenizer(br.readLine());
                int a = Integer.parseInt(st2.nextToken());
                int b = Integer.parseInt(st2.nextToken());
                arr[a][b] = 1;
            }

            for (int k = 0; k < M; k++) {
                for (int l = 0; l < N; l++) {
                    if (arr[k][l] == 1 && !check[k][l]) {
                        dfsR(k, l);
                        cnt++;
                    }
                }
            }

            System.out.println(cnt);

        }


    }

    public static void dfsR(int x, int y) {

        check[x][y] = true;

        for (int i = 0; i < 4; i++) {
            int next_x = x + move_x[i];
            int next_y = y + move_y[i];
            
            if (next_x < 0 || next_y < 0 || next_x > M || next_y > N ) continue;
            if (arr[next_x][next_y] == 0 || check[next_x][next_y]) continue;

            dfsR(next_x, next_y);
        }

    }

}

#11724

package java_coding_test.src;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

    static int[][] arr;
    static boolean[] check;

    static int node, line;

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st = new StringTokenizer(br.readLine());
        node = Integer.parseInt(st.nextToken());
        line = Integer.parseInt(st.nextToken());

        arr = new int[node + 1][node + 1];
        check = new boolean[node + 1];

        for (int i = 0; i < line; i++) {
            StringTokenizer st2 = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st2.nextToken());
            int b = Integer.parseInt(st2.nextToken());
            
            arr[a][b] = arr[b][a] = 1;
        }

        int cnt = 0;
        for (int i = 1; i <= node; i++) {
            if (check[i]) continue;
            dfsR(i);
            cnt++;
        }

        System.out.println(cnt);

    }

    static void dfsR(int start) {

        check[start] = true;

        for (int i = 1; i <= node; i++) {
            if (arr[start][i] == 1 && !check[i]) dfsR(i);
        }

    }
}

#11725

package java_coding_test.src;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.StringTokenizer;

public class Main {

    static ArrayList<Integer> list[];
    static boolean[] check;

    static HashMap<Integer, Integer> map = new HashMap<>();

    static int N;
    static StringBuilder sb = new StringBuilder();
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        N = Integer.parseInt(br.readLine());
        list = new ArrayList[N + 1];
        check = new boolean[N + 1];

        for (int i = 1; i < N+1; i++) {
            list[i] = new ArrayList<>();
        }

        for (int i = 0; i < N-1; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            
            list[a].add(b);
            list[b].add(a);
        }

        dfsR(1, 0);

        for (int i = 2; i <= N; i++) {
            System.out.println(map.get(i));
        }

    }

    static void dfsR(int start, int parent) {

        map.put(start, parent);
        check[start] = true;

        for (int i : list[start]) {
            if (!check[i]) dfsR(i, start);
        }

    }

}

#2468

package java_coding_test.src;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class Main {

    static int[][] map;
    static boolean[][] check;

    static int[] move_x = {-1, 1, 0, 0};
    static int[] move_y = {0, 0, -1, 1};

    static int N;

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        N = Integer.parseInt(br.readLine());

        map = new int[N][N];

        int maxDepth = 0;
        for (int i = 0; i < N; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            for (int j = 0; j < N; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
                if (map[i][j] > maxDepth) maxDepth = map[i][j];
            }
        }
                
        int max = 0;
        for (int depth = 0; depth <= maxDepth; depth++) {
            check = new boolean[N][N];
            int area = 0;

            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    if (map[i][j] > depth && !check[i][j]) {
                        dfsR(i, j, depth);
                        area++;
                    } 
                }
            }
            
            max = Math.max(area, max);
        }

        System.out.println(max);

    }

    static void dfsR(int x, int y, int depth) {

        check[x][y] = true;

        for (int i = 0; i < 4; i++) {
            int next_x = move_x[i] + x;
            int next_y = move_y[i] + y;

            if (next_x < 0 || next_y < 0 || next_x >= N || next_y >= N) continue;
            if (map[next_x][next_y] <= depth || check[next_x][next_y]) continue;

            dfsR(next_x, next_y, depth);
        }

    }

}

#4963

package java_coding_test.src;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

    static int[][] map;
    static boolean[][] check;
    static int[] move_x = {-1, 1, 0, 0, -1, -1, 1, 1};
    static int[] move_y = {0, 0, -1, 1, -1, 1, -1, 1};

    static int w, h;

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        StringTokenizer st = new StringTokenizer(br.readLine());
        w = Integer.parseInt(st.nextToken());
        h = Integer.parseInt(st.nextToken());

        while (w != 0 && h != 0) {
            map = new int[h][w];
            check = new boolean[h][w];
            int cnt = 0;
            
            for (int i = 0; i < h; i++) {
                StringTokenizer st2 = new StringTokenizer(br.readLine());
                for (int j = 0; j < w; j++) {
                    map[i][j] = Integer.parseInt(st2.nextToken());
                }
            }

            for (int i = 0; i < h; i++) {
                for (int j = 0; j < w; j++) {
                    if (map[i][j] == 1 && !check[i][j]) cnt += dfsR(i, j);
                }
            }
            
            System.out.println(cnt);

            StringTokenizer st3 = new StringTokenizer(br.readLine());
            w = Integer.parseInt(st3.nextToken());
            h = Integer.parseInt(st3.nextToken());
        }
    }

    static int dfsR(int x, int y) {

        check[x][y] = true;

        for (int i = 0; i < 8; i++) {
            int next_x = move_x[i] + x;
            int next_y = move_y[i] + y;

            if (next_x < 0 || next_y < 0 || next_x >= h || next_y >= w) continue;
            if (map[next_x][next_y] == 0 || check[next_x][next_y]) continue;

            dfsR(next_x, next_y);
        }

        return 1;
    }
}

#2644

package java_coding_test.src;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

    static int[][] arr;
    static int[] check;

    static int start, end;
    static int N, line;
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        N = Integer.parseInt(br.readLine());
        StringTokenizer st = new StringTokenizer(br.readLine());
        start = Integer.parseInt(st.nextToken());
        end = Integer.parseInt(st.nextToken());
        
        arr = new int[N + 1][N + 1];
        check = new int[N + 1];

        line = Integer.parseInt(br.readLine());
        for (int i = 0; i < line; i++) {
            StringTokenizer st2 = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st2.nextToken());
            int b = Integer.parseInt(st2.nextToken());
            
            arr[a][b] = arr[b][a] = 1;
        }

        dfsR(start);
        System.out.println(check[end] == 0 ? -1 : check[end]);
        
    }

    static void dfsR(int start) {

        if (start == end) return;
        
        for (int i = 1; i <= N; i++) {
            if (arr[start][i] == 1 && check[i] == 0) {
                check[i] = check[start] + 1;
                dfsR(i);
            }
        }

    }
}

#1926

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

    static int[][] map;
    static boolean[][] check;
    static int[] move_x = {-1, 1, 0, 0};
    static int[] move_y = {0, 0, -1, 1};
    
    static int n, m, cnt;
    
    
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());

        map = new int[n][m];

        for (int i = 0; i < n; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < m; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        check = new boolean[n][m];
        int max = 0;        
        int total = 0;
        for (int  i = 0 ; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (map[i][j] == 1 && !check[i][j]) {
                    cnt = 0;
                    dfsR(i, j);
                    max = Math.max(max, cnt);
                    total++;
                }
            }
        }
                
        System.out.println(total);
        System.out.println(max);
        
    }

    static void dfsR(int x, int y) {
        
        check[x][y] = true;
        cnt++;

        for (int i = 0; i < 4; i++) {
            int next_x = move_x[i] + x;
            int next_y = move_y[i] + y;

            if (next_x < 0 || next_y < 0 || next_x >= n || next_y >= m) continue;
            if (map[next_x][next_y] == 0 || check[next_x][next_y]) continue;

            dfsR(next_x, next_y);
        }

    }
    
}
